{"version":3,"sources":["logo.svg","components/Navbar/HelpButton.js","components/Navbar/Navbar.js","components/InfoCards/spline_covid.png","components/InfoCards/NumPoints.gif","components/InfoCards/PresetFunction.gif","components/InfoCards/SplineDegree.gif","components/InfoCards/Tables.gif","components/InfoCards/Bound.gif","components/InfoCards/InfoCards.js","hooks/useArray.js","hooks/useToggle.js","kspline.js","components/GraphContainer/Graph.js","components/GraphContainer/Controller/XYTable.js","components/GraphContainer/Controller/BoundaryConditionsTable.js","components/GraphContainer/Controller/Controller.js","components/GraphContainer/GraphContainer.js","App.js","reportWebVitals.js","index.js"],"names":["HelpButton","props","setShowCards","className","onClick","Navbar","src","logo","alt","LinkedListNode","data","this","next","prev","cardList","first","last","size","InfoCards","useState","curr","setCurr","WelcomeCard","Card1","covid","Card2","Card3","Card4","Card5","NumPoints","Card6","PresetFunction","Card7","SplineDegree","Card8","Tables","Card9","Card10","href","put","useArray","defaultValue","array","setArray","arrayMethods","push","element","a","set","newArray","filter","callback","update","index","newElement","temp","slice","remove","length","clear","useToggle","value","setValue","currentValue","math","require","npermutek","n","k","Error","factorial","Spline","X","Y","boundaryConditionType","boundArray","C","undefined","A","zeros","b","eq","i","row1","row2","p","indexInRow","subset","pow","range","m","row","t","index1InRow","val1","index2InRow","val2","BC","right","val","leftBC_MAX","Math","ceil","rightBC_MAX","floor","leftBC","rightBC","leftOffset","rightOffset","S","lusolve","reshape","kspline","console","log","pieces","coeff","interval","SplinePiece","x","pieceIndex","findPiece","evaluate","hi","lo","mid","coefficients","ans","Point","y","Plot","createPlotlyComponent","Plotly","Graph","pointColor","functionColor","splineColor","numPoints","points","enablePreset","presetFunction","splineDegree","isNotAKnot","isGraphable_Points","boundArrayReady","includes","isGraphable_Spline","solvingError","isGraphable_Function","xPoints","sort","p1","p2","map","point","yPoints","xIncrements","Xo","Xn","step","space","round","LinSpace","yFunction","ySpline","matrix","mode","name","marker","color","line","layout","width","height","title","XYTable","pointsArrayMethods","rows","XYTableRow","id","Header","setX","setY","dispX","setDispX","dispY","setDispY","initialRender","useRef","useEffect","current","Array","fill","onChange","e","input","numerical","Number","isNaN","onInputX_enablePreset","target","onInputX","onInputY","BoundaryConditionsTable","boundArrayMethods","numCond","leftRows","rightRows","NaturalTableRow","order","isLeft","NotAKnotTableRow","TableRowWithInput","dispValue","setDispValue","onInput","Controller","setNumPoints","togglePreset","setPreset","setSplineDegree","setBoundaryConditionType","NumDataBox","PresetFunctionBox","SplineDegreeBox","SelectBoundCondBox","isValid","setIsValid","InputBox","displayValue","min","presets","TogglePresetButton","DropDownMenu","menuItems","funcSelection","exp","sin","cos","tanh","gamma","viewBox","cx","cy","r","stroke","max","newValue","condSelection","kOffset","selectedItem","setSelectedItem","isOpen","toggleIsOpen","tabIndex","onBlur","event","currentTarget","contains","relatedTarget","item","GraphContainer","App","showCards","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57775917.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.8a2dfab5.svg\";","import \"./Navbar.css\";\r\n\r\nexport default function HelpButton(props) {\r\n  const { setShowCards } = props;\r\n  return (\r\n    <div\r\n      className=\"helpButton\"\r\n      onClick={() => {\r\n        setShowCards(true);\r\n      }}\r\n    >\r\n      ?\r\n    </div>\r\n  );\r\n}\r\n","import \"./Navbar.css\";\r\nimport logo from \"../../logo.svg\";\r\nimport HelpButton from \"./HelpButton\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <img className=\"logo\" src={logo} alt=\"logo\" />\r\n      <h1>Spline Visualizer</h1>\r\n      <HelpButton setShowCards={props.setShowCards} />\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spline_covid.5790aa27.png\";","export default __webpack_public_path__ + \"static/media/NumPoints.08de0f64.gif\";","export default __webpack_public_path__ + \"static/media/PresetFunction.c46aade1.gif\";","export default __webpack_public_path__ + \"static/media/SplineDegree.bd047837.gif\";","export default __webpack_public_path__ + \"static/media/Tables.5e7e5137.gif\";","export default __webpack_public_path__ + \"static/media/Bound.db43e4dd.gif\";","import \"./InfoCards.css\";\r\nimport { useState } from \"react\";\r\nimport logo from \"../../logo.svg\";\r\nimport covid from \"./spline_covid.png\";\r\nimport NumPoints from \"./NumPoints.gif\";\r\nimport PresetFunction from \"./PresetFunction.gif\";\r\nimport SplineDegree from \"./SplineDegree.gif\";\r\nimport Bound from \"./Bound.gif\";\r\nimport Tables from \"./Tables.gif\";\r\n\r\nclass LinkedListNode {\r\n  constructor(data) {\r\n    this.data = data;\r\n    this.next = null;\r\n    this.prev = null;\r\n  }\r\n}\r\n\r\nclass LinkedList {\r\n  constructor() {\r\n    this.first = null;\r\n    this.last = null;\r\n    this.size = 0;\r\n  }\r\n\r\n  put(data) {\r\n    if (this.first === null) {\r\n      this.first = new LinkedListNode(data);\r\n      this.last = this.first;\r\n      this.size++;\r\n    } else if (this.last !== null) {\r\n      this.last.next = new LinkedListNode(data);\r\n      this.last.next.prev = this.last;\r\n      this.last = this.last.next;\r\n    }\r\n  }\r\n}\r\n\r\nlet cardList = new LinkedList();\r\ncardList.put(<WelcomeCard />);\r\ncardList.put(<Card1 />);\r\ncardList.put(<Card2 />);\r\ncardList.put(<Card3 />);\r\ncardList.put(<Card4 />);\r\ncardList.put(<Card5 />);\r\ncardList.put(<Card6 />);\r\ncardList.put(<Card7 />);\r\ncardList.put(<Card8 />);\r\ncardList.put(<Card9 />);\r\ncardList.put(<Card10 />);\r\n\r\nexport default function InfoCards(props) {\r\n  const { setShowCards } = props;\r\n  const [curr, setCurr] = useState(cardList.first);\r\n  return (\r\n    <div className=\"infoCard\">\r\n      {curr.data}\r\n      <div className=\"next-prevButtons\">\r\n        {curr.prev !== null ? (\r\n          <button className=\"cardButton\" onClick={() => setCurr(curr.prev)}>\r\n            {\"Previous\"}\r\n          </button>\r\n        ) : null}\r\n        {curr.next !== null ? (\r\n          <button className=\"cardButton\" onClick={() => setCurr(curr.next)}>\r\n            {\"Next\"}\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n      <button\r\n        className=\"cardButton exitButton\"\r\n        onClick={() => {\r\n          setCurr(cardList.first);\r\n          setShowCards(false);\r\n        }}\r\n      >\r\n        Exit\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction WelcomeCard() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Welcome to the Spline Visualizer!</h1>\r\n      <p>These cards will serve as a tutorial for the application, as well as provide some background into splines.</p>\r\n      <p>To exit the tutorial if you want to hop right in, just click the Exit button!</p>\r\n      <img className=\"logo\" src={logo} alt=\"Spline App Logo\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card1() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>What is a Spline?</h1>\r\n      <p>\r\n        To put it simply, splines are piecewise polynomial functions that are constructed to fit some data with one goal in mind: <b>Interpolation</b>\r\n        .\r\n      </p>\r\n      <p>\r\n        Interpolation is the idea that if you only know a few points on some <b>unknown</b> function, a function you can't figure out, you can fill in\r\n        the gaps between those points with a function that you do know how to figure out, like parabolas or cubics.\r\n      </p>\r\n      <img className=\"logo\" src={covid} alt=\"Applying Splines on Coronavirus data\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card2() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>What is a Spline?</h1>\r\n      <p>\r\n        By making sure that the different pieces of the piecewise function you construct pass directly through the points you know, and by making sure\r\n        the pieces connect smoothly and continuously, one can easily construct a spline!\r\n      </p>\r\n      <p>\r\n        Continuity means that the pieces connect, and smoothness means that the derivatives match up at those points as well. At the boundaries, you\r\n        are free to use your imagination!\r\n      </p>\r\n      <p>\r\n        Where two spline segments (two pieces of the piecewise polynomial) meet is known as a <b>knot</b>. The samples used to create the spline are\r\n        going to be the knots!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card3() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Boundary Conditions</h1>\r\n      <p>\r\n        Splines are constructed by solving systems of linear equations, which means that depending on the degree of the polynomials that you use\r\n        (their highest power), you are going to need lots and lots of equations to solve for all of those coefficients. It is important to note that\r\n        some combinations of parameters result in inconsistent systems of equations that simply cannot be solved for! In those cases, the parameters\r\n        must be adjusted.\r\n      </p>\r\n      <p>\r\n        The equations you get from connecting the pieces and making them smooth are still not enough, and in general for a degree <b>k</b> spline, you\r\n        need <b>k-1</b> more equations. That is where the Boundary Conditions come into play!\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card4() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Boundary Conditions</h1>\r\n      <p>\r\n        Boundary Conditions are used to specify the values of the derivatives of the spline at the two end points, and depending on what the user\r\n        chooses for those, the resulting spline can vary wildly. There can theoretically be any kind of boundary condition; finding ones that are\r\n        useful is the hard bit.\r\n      </p>\r\n      <div>\r\n        <p className=\"boundaryDefinition\">\r\n          <b>Natural Boundary Conditions</b>: starting with the second highest order derivative possible for the degree of spline chosen, set those\r\n          derivatives equal to 0 at the end points and work your way down.\r\n        </p>\r\n        <p className=\"boundaryDefinition\">\r\n          <b>Clamped Boundary Conditions</b>: starting with the smallest order derivatives first and working your way down, the user can specify the\r\n          exact condition that they want the spline to satisfy and it will be so.\r\n        </p>\r\n        <p className=\"boundaryDefinition\">\r\n          <b>Not-a-Knot</b>: one of the most popular boundary condition types, in which the two spline segments connected by the knot right after the\r\n          first and right before the last are constructed so that even their highest order derivative is the same. Can be mixed with the other two\r\n          types of boundary conditions\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card5() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Specifying Number of Data Points</h1>\r\n      <p>To start using the app, first input the number of data points you would like to use to construct the spline.</p>\r\n      <img className=\"gif\" src={NumPoints} alt=\"Demonstrating choosing points\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card6() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Toggling and Choosing a Preset Function</h1>\r\n      <p>Next, you can choose to either input both X and Y values yourself, or perform interpolation on a pre-defined function instead.</p>\r\n      <img className=\"gif\" src={PresetFunction} alt=\"Demonstrating choosing points\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card7() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Selecting the Spline's Degree</h1>\r\n      <p>\r\n        You may use the slider to select the degree of spline you would like. I have limited it to degree 10, but theoretically there is no limit to\r\n        the power of the spline!\r\n      </p>\r\n      <img className=\"gif\" src={SplineDegree} alt=\"Demonstrating choosing points\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card8() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Filling in the XY Table and Boundary Conditions</h1>\r\n      <p>\r\n        Finally, you may fill in the XY Table and Boundary Condition Tables. If you have enabled a preset function, then the Y values will be filled\r\n        in automatically. Otherwise, you may fill in both X and Y yourself.\r\n      </p>\r\n      <p>\r\n        The Boundary Conditions only require input from you if you selected <b>Clamped</b> or <b>Not-a-Knot + Clamped</b>. The amount of inputs is\r\n        determined by the degree of spline you chose.\r\n      </p>\r\n      <img className=\"big-gif\" src={Tables} alt=\"Demonstrating choosing points\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card9() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Spline History and Thank You!</h1>\r\n      <p>\r\n        The word \"spline\" is an old English word that refers to bent wooden beams used to construct ships and naval vessels! It took mathematics a few\r\n        hundred years after to develop what we see here, when the idea was developed in the late 1940s by Isaac Schoenberg. Splines are a fascinating\r\n        application of Calculus, Linear Algebra, and Numerical Analysis, and have become ubiquitous across many fields.\r\n      </p>\r\n\r\n      <p>Thank you for visiting! I hope that you have as much fun noodling around in this app as I had developing it and learning about splines!</p>\r\n\r\n      <p>\r\n        On the next page I have included further reading for those who are curious about the applications of splines from computer graphics to\r\n        developing new models of cars.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Card10() {\r\n  return (\r\n    <div className=\"infoCard-Body\">\r\n      <h1>Further Reading</h1>\r\n      <a href=\"https://github.com/danmaevsky/Spline-Visualizer/tree/master\">\r\n        The GitHub Repo for this project for those interested in seeing the source code\r\n      </a>\r\n      <a href=\"https://en.wikipedia.org/wiki/Spline_(mathematics)\">An Overview of the Mathematical Spline</a>\r\n      <a href=\"https://en.wikipedia.org/wiki/Flat_spline\">An Overview of the Spline as it was used in history</a>\r\n      <a href=\"https://en.wikipedia.org/wiki/Composite_B%C3%A9zier_curve\">Bezier Curves</a>\r\n      <a href=\"https://en.wikipedia.org/wiki/Non-uniform_rational_B-spline\">Non-Uniform Rational Basis Splines (NURBS) for Precise 3D Modeling</a>\r\n      <a href=\"https://ieeexplore.ieee.org/document/8485301\">Splines used in Autonomous Vehicles</a>\r\n      <a href=\"https://www.geeksforgeeks.org/interpolation-methods-in-computer-graphics/\">More about Interpolation</a>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useArray(defaultValue) {\r\n  const [array, setArray] = useState(defaultValue);\r\n\r\n  function push(element) {\r\n    setArray((a) => [...a, element]);\r\n  }\r\n\r\n  function set(newArray) {\r\n    setArray(newArray);\r\n  }\r\n\r\n  function filter(callback) {\r\n    setArray((a) => a.filter(callback));\r\n  }\r\n\r\n  function update(index, newElement) {\r\n    let temp = array.slice();\r\n    temp[index] = newElement;\r\n    setArray(temp);\r\n  }\r\n\r\n  function remove(index) {\r\n    setArray((a) => [...a.slice(0, index), ...a.slice(index + 1, a.length)]);\r\n  }\r\n\r\n  function clear() {\r\n    setArray([]);\r\n  }\r\n\r\n  const arrayMethods = {\r\n    push: push,\r\n    set: set,\r\n    filter: filter,\r\n    update: update,\r\n    remove: remove,\r\n    clear: clear,\r\n  };\r\n\r\n  return [array, arrayMethods];\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function useToggle(defaultValue) {\r\n  const [value, setValue] = useState(defaultValue);\r\n\r\n  function toggleValue(value) {\r\n    setValue((currentValue) => (typeof value == \"boolean\" ? value : !currentValue));\r\n  }\r\n\r\n  return [value, toggleValue];\r\n}\r\n","const math = require(\"mathjs\");\r\n\r\nfunction kspline(X, Y, k, boundaryConditionType, boundArray) {\r\n  if (boundaryConditionType === undefined) {\r\n    boundaryConditionType = \"Natural\";\r\n  }\r\n\r\n  let n = X.size()[0] - 1;\r\n  let A = math.zeros((k + 1) * n, (k + 1) * n);\r\n  let b = math.zeros((k + 1) * n, 1);\r\n  let eq = 0;\r\n\r\n  // Populate A with \"Fitting and Knot Equations\"\r\n  for (let i = 1; i <= n; i++) {\r\n    let row1 = math.zeros(1, (k + 1) * n);\r\n    let row2 = math.zeros(1, (k + 1) * n);\r\n\r\n    for (let p = 0; p <= k; p++) {\r\n      let indexInRow = i * (k + 1) - p;\r\n      row1.subset(math.index(0, indexInRow - 1), math.pow(X.subset(math.index(i - 1)), p));\r\n      row2.subset(math.index(0, indexInRow - 1), math.pow(X.subset(math.index(i)), p));\r\n    }\r\n    // row1.subset(math.index(0, row1.size()[1] - 1), Y.subset(math.index(i - 1)));\r\n    // row2.subset(math.index(0, row2.size()[1] - 1), Y.subset(math.index(i)));\r\n    A.subset(math.index(eq, math.range(0, (k + 1) * n)), row1);\r\n    b.subset(math.index(eq, 0), Y.subset(math.index(i - 1)));\r\n    eq++;\r\n    A.subset(math.index(eq, math.range(0, (k + 1) * n)), row2);\r\n    b.subset(math.index(eq, 0), Y.subset(math.index(i)));\r\n    eq++;\r\n  }\r\n\r\n  // Populate A with Derivative Equations\r\n  for (let m = 1; m <= k - 1; m++) {\r\n    for (let i = 1; i <= n - 1; i++) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      for (let t = k; t >= m; t--) {\r\n        let index1InRow = i * (k + 1) - t;\r\n        let val1 = npermutek(t, m) * math.pow(X.subset(math.index(i)), t - m);\r\n        row.subset(math.index(0, index1InRow - 1), val1);\r\n\r\n        let index2InRow = (i + 1) * (k + 1) - t;\r\n        let val2 = -npermutek(t, m) * math.pow(X.subset(math.index(i)), t - m);\r\n        row.subset(math.index(0, index2InRow - 1), val2);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      b.subset(math.index(eq, 0), 0);\r\n      eq++;\r\n    }\r\n  }\r\n\r\n  if (boundaryConditionType === \"Natural\") {\r\n    // Populate A with Natural Boundary Conditions\r\n    let BC = 0;\r\n    let m = k - 1;\r\n    // Toggle between boundary at X_n and X_0 for Natural BC\r\n    let right = true;\r\n    while (BC < k - 1) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      if (right) {\r\n        let i = n;\r\n        for (let t = k; t >= m; t--) {\r\n          let indexInRow = i * (k + 1) - t;\r\n          let val = npermutek(t, m) * math.pow(X.subset(math.index(n)), t - m);\r\n          row.subset(math.index(0, indexInRow - 1), val);\r\n        }\r\n      } else {\r\n        let i = 1;\r\n        for (let t = k; t >= m; t--) {\r\n          let indexInRow = i * (k + 1) - t;\r\n          let val = npermutek(t, m) * math.pow(X.subset(math.index(0)), t - m);\r\n          row.subset(math.index(0, indexInRow - 1), val);\r\n        }\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      eq++;\r\n      right = !right;\r\n      BC++;\r\n      if (right) {\r\n        m--;\r\n      }\r\n    }\r\n  } else if (boundaryConditionType === \"Clamped\") {\r\n    // Populate A with the given Clamped Boundary Conditions, starting at the lowest order derivative\r\n    let m = 1;\r\n    // Prioritize Left BC by applying ceil() to them. ceil() and floor() should partition the total BC count exactly\r\n    const leftBC_MAX = Math.ceil((k - 1) / 2);\r\n    const rightBC_MAX = Math.floor((k - 1) / 2);\r\n    let leftBC = 0;\r\n    let rightBC = 0;\r\n\r\n    while (leftBC < leftBC_MAX) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      let i = 1;\r\n      for (let t = k; t >= m; t--) {\r\n        let indexInRow = i * (k + 1) - t;\r\n        let val = npermutek(t, m) * math.pow(X.subset(math.index(0)), t - m);\r\n        row.subset(math.index(0, indexInRow - 1), val);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      b.subset(math.index(eq, 0), boundArray[leftBC]);\r\n      eq++;\r\n      leftBC++;\r\n      m++;\r\n    }\r\n\r\n    m = 1;\r\n\r\n    while (rightBC < rightBC_MAX) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      let i = n;\r\n      for (let t = k; t >= m; t--) {\r\n        let indexInRow = i * (k + 1) - t;\r\n        let val = npermutek(t, m) * math.pow(X.subset(math.index(n)), t - m);\r\n        row.subset(math.index(0, indexInRow - 1), val);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      b.subset(math.index(eq, 0), boundArray[leftBC_MAX + rightBC]);\r\n      eq++;\r\n      rightBC++;\r\n      m++;\r\n    }\r\n  } else if (boundaryConditionType === \"Not-a-Knot + Natural\") {\r\n    let BC = 0;\r\n    let m = k;\r\n    if (k > 1 && n > 2) {\r\n      let i = 1;\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      for (let t = k; t >= m; t--) {\r\n        let index1InRow = i * (k + 1) - t;\r\n        // this is the Not-a-Knot condition: a0 = a1\r\n        let val1 = 1;\r\n        row.subset(math.index(0, index1InRow - 1), val1);\r\n\r\n        let index2InRow = (i + 1) * (k + 1) - t;\r\n        let val2 = -1;\r\n        row.subset(math.index(0, index2InRow - 1), val2);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      eq++;\r\n      BC++;\r\n    }\r\n\r\n    if (k > 2 && n > 2) {\r\n      let i = n;\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      for (let t = k; t >= m; t--) {\r\n        let index1InRow = (i - 1) * (k + 1) - t;\r\n        // this is the Not-a-Knot condition: a(n-2) = a(n-1)\r\n        let val1 = 1;\r\n        row.subset(math.index(0, index1InRow - 1), val1);\r\n\r\n        let index2InRow = i * (k + 1) - t;\r\n        let val2 = -1;\r\n        row.subset(math.index(0, index2InRow - 1), val2);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      eq++;\r\n      BC++;\r\n    }\r\n\r\n    // the rest will be natural\r\n    m = k - 1;\r\n    // Toggle between boundary at X_n and X_0 for Natural BC\r\n    let right = true;\r\n    while (BC < k - 1) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      if (right) {\r\n        let i = n;\r\n        for (let t = k; t >= m; t--) {\r\n          let indexInRow = i * (k + 1) - t;\r\n          let val = npermutek(t, m) * math.pow(X.subset(math.index(n)), t - m);\r\n          row.subset(math.index(0, indexInRow - 1), val);\r\n        }\r\n      } else {\r\n        let i = 1;\r\n        for (let t = k; t >= m; t--) {\r\n          let indexInRow = i * (k + 1) - t;\r\n          let val = npermutek(t, m) * math.pow(X.subset(math.index(0)), t - m);\r\n          row.subset(math.index(0, indexInRow - 1), val);\r\n        }\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      eq++;\r\n      right = !right;\r\n      BC++;\r\n      if (right) {\r\n        m--;\r\n      }\r\n    }\r\n  } else if (boundaryConditionType === \"Not-a-Knot + Clamped\") {\r\n    const leftBC_MAX = Math.ceil((k - 1) / 2);\r\n    const rightBC_MAX = Math.floor((k - 1) / 2);\r\n    let leftBC = 0;\r\n    let leftOffset = 0;\r\n    let rightBC = 0;\r\n    let rightOffset = 0;\r\n    let m = k;\r\n    if (k > 1 && n > 2) {\r\n      let i = 1;\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      for (let t = k; t >= m; t--) {\r\n        let index1InRow = i * (k + 1) - t;\r\n        // this is the Not-a-Knot condition: a0 = a1\r\n        let val1 = 1;\r\n        row.subset(math.index(0, index1InRow - 1), val1);\r\n\r\n        let index2InRow = (i + 1) * (k + 1) - t;\r\n        let val2 = -1;\r\n        row.subset(math.index(0, index2InRow - 1), val2);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      eq++;\r\n      leftBC++;\r\n      leftOffset++;\r\n    }\r\n\r\n    if (k > 2 && n > 2) {\r\n      let i = n;\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      for (let t = k; t >= m; t--) {\r\n        let index1InRow = (i - 1) * (k + 1) - t;\r\n        // this is the Not-a-Knot condition: a(n-2) = a(n-1)\r\n        let val1 = 1;\r\n        row.subset(math.index(0, index1InRow - 1), val1);\r\n\r\n        let index2InRow = i * (k + 1) - t;\r\n        let val2 = -1;\r\n        row.subset(math.index(0, index2InRow - 1), val2);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      eq++;\r\n      rightBC++;\r\n      rightOffset++;\r\n    }\r\n\r\n    // the rest will be Clamped\r\n    m = 1;\r\n    while (leftBC < leftBC_MAX) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      let i = 1;\r\n      for (let t = k; t >= m; t--) {\r\n        let indexInRow = i * (k + 1) - t;\r\n        let val = npermutek(t, m) * math.pow(X.subset(math.index(0)), t - m);\r\n        row.subset(math.index(0, indexInRow - 1), val);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      b.subset(math.index(eq, 0), boundArray[leftBC - leftOffset]);\r\n      eq++;\r\n      leftBC++;\r\n      m++;\r\n    }\r\n\r\n    m = 1;\r\n    while (rightBC < rightBC_MAX) {\r\n      let row = math.zeros(1, (k + 1) * n);\r\n      let i = n;\r\n      for (let t = k; t >= m; t--) {\r\n        let indexInRow = i * (k + 1) - t;\r\n        let val = npermutek(t, m) * math.pow(X.subset(math.index(n)), t - m);\r\n        row.subset(math.index(0, indexInRow - 1), val);\r\n      }\r\n      A.subset(math.index(eq, math.range(0, (k + 1) * n)), row);\r\n      b.subset(math.index(eq, 0), boundArray[leftBC_MAX + rightBC - rightOffset - leftOffset]);\r\n      eq++;\r\n      rightBC++;\r\n      m++;\r\n    }\r\n  }\r\n\r\n  let S = math.lusolve(A, b);\r\n  return math.reshape(S, [n, k + 1]);\r\n}\r\n\r\nfunction npermutek(n, k) {\r\n  if (k > n) {\r\n    return 0;\r\n  } else if (k < 0) {\r\n    let e = new Error(\"Domain Error for nPk: k must be a nonnegative integer\");\r\n    throw e;\r\n  }\r\n  return math.factorial(n) / math.factorial(n - k);\r\n}\r\n\r\nexport class Spline {\r\n  constructor(X, Y, k, boundaryConditionType, boundArray) {\r\n    let C = kspline(X, Y, k, boundaryConditionType, boundArray);\r\n    console.log(\"C: \");\r\n    console.log(C);\r\n    this.pieces = [];\r\n    for (let i = 0; i < C.size()[0]; i++) {\r\n      let coeff = C.subset(math.index(i, math.range(0, C.size()[1])));\r\n      let interval = [X.subset(math.index(i)), X.subset(math.index(i + 1))];\r\n      this.pieces.push(new SplinePiece(coeff, interval));\r\n    }\r\n  }\r\n\r\n  evaluate(x) {\r\n    let pieceIndex = this.findPiece(x);\r\n    return this.pieces[pieceIndex].evaluate(x);\r\n  }\r\n\r\n  findPiece(x) {\r\n    let hi = this.pieces.length;\r\n    let lo = 0;\r\n    let mid = Math.floor(lo + (hi - lo) / 2);\r\n\r\n    while (lo < hi) {\r\n      if (x < this.pieces[mid].interval[0]) {\r\n        hi = mid - 1;\r\n        mid = Math.floor(lo + (hi - lo) / 2);\r\n      } else if (x > this.pieces[mid].interval[1]) {\r\n        lo = mid + 1;\r\n        mid = Math.floor(lo + (hi - lo) / 2);\r\n      } else {\r\n        return mid;\r\n      }\r\n    }\r\n\r\n    return mid;\r\n  }\r\n}\r\n\r\nclass SplinePiece {\r\n  constructor(coefficients, interval) {\r\n    this.coefficients = [];\r\n    for (let i = 0; i < coefficients.size()[1]; i++) {\r\n      this.coefficients.push(coefficients.subset(math.index(0, i)));\r\n    }\r\n    this.interval = interval;\r\n  }\r\n\r\n  evaluate(x) {\r\n    if (x < this.interval[0] || x > this.interval[1]) {\r\n      return null;\r\n    } else {\r\n      let ans = 0;\r\n      let length = this.coefficients.length;\r\n      for (let i = 0; i < length; i++) {\r\n        ans += this.coefficients[length - 1 - i] * math.pow(x, i);\r\n      }\r\n      return ans;\r\n    }\r\n  }\r\n}\r\n\r\nexport class Point {\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n}\r\n","import { Spline, Point } from \"../../kspline\";\r\nimport createPlotlyComponent from \"react-plotly.js/factory\";\r\nimport Plotly from \"plotly.js\";\r\nimport \"./Graph.css\";\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst math = require(\"mathjs\");\r\n\r\nexport default function Graph(props) {\r\n  const pointColor = \"#ff8d14\";\r\n  const functionColor = \"#03c234\";\r\n  const splineColor = \"#0f6ee7\";\r\n  const numPoints = props.numPoints;\r\n  let points = props.points;\r\n  const enablePreset = props.enablePreset;\r\n  const presetFunction = props.presetFunction;\r\n  const splineDegree = props.splineDegree;\r\n  const boundaryConditionType = props.boundaryConditionType;\r\n  let boundArray = props.boundArray;\r\n  const isNotAKnot = boundaryConditionType === \"Not-a-Knot + Natural\" || boundaryConditionType === \"Not-a-Knot + Clamped\";\r\n\r\n  // isGraphable_Points boolean to know when the xArray and yArray are\r\n  // actually populated. This means no \"undefined\" values\r\n  const isGraphable_Points = points !== undefined && points.length >= 1;\r\n  if (isGraphable_Points) {\r\n    points = points.slice(0, numPoints);\r\n    points = points.filter((p) => p !== undefined);\r\n  }\r\n\r\n  // isGraphable_Spline boolean to know when the Spline is ready to be\r\n  // graphed. This means the boundArray has no \"undefined\" values if\r\n  // a clamped boundary condition is chosen\r\n  let boundArrayReady = true;\r\n  boundArray = boundArray.slice(0, splineDegree - 1);\r\n  if (boundaryConditionType === \"Clamped\" || boundaryConditionType === \"Not-a-Knot + Clamped\") {\r\n    boundArrayReady = !boundArray.includes(undefined);\r\n  }\r\n  let isGraphable_Spline = isGraphable_Points && points.length === numPoints && boundArrayReady;\r\n  if (isNotAKnot && numPoints < 4) {\r\n    isGraphable_Spline = false;\r\n  }\r\n  let solvingError = false;\r\n\r\n  // isGraphable_Function boolean to know when it is time to graph the\r\n  // preset function. Only do this once all the x-values are populated\r\n  // and if the user wants a preset function\r\n  const isGraphable_Function = isGraphable_Points && enablePreset;\r\n\r\n  // populating the different graphed components\r\n  points = points.sort((p1, p2) => p1.x > p2.x);\r\n  let xPoints = points.map((point) => point.x);\r\n  let yPoints = points.map((point) => point.y);\r\n\r\n  let xIncrements = null;\r\n  if (isGraphable_Points) {\r\n    xIncrements = LinSpace(xPoints[0], xPoints[xPoints.length - 1], 0.01);\r\n  }\r\n\r\n  let yFunction = null;\r\n  if (isGraphable_Function) {\r\n    yFunction = xIncrements.map((x) => presetFunction(x));\r\n  }\r\n\r\n  let ySpline = null;\r\n  if (isGraphable_Spline) {\r\n    try {\r\n      let temp = !boundArray.includes(undefined) ? boundArray.map((p) => p.value) : [];\r\n      let S = new Spline(math.matrix(xPoints), math.matrix(yPoints), splineDegree, boundaryConditionType, temp);\r\n      ySpline = xIncrements.map((x) => S.evaluate(x));\r\n    } catch {\r\n      isGraphable_Spline = false;\r\n      solvingError = true;\r\n    }\r\n  }\r\n\r\n  if (solvingError && isGraphable_Points && !isGraphable_Function) {\r\n    return (\r\n      <div className=\"plot\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              mode: \"markers\",\r\n              name: \"Data Points\",\r\n              marker: {\r\n                color: pointColor,\r\n                size: 10,\r\n              },\r\n              x: xPoints,\r\n              y: yPoints,\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: functionColor,\r\n              },\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: splineColor,\r\n              },\r\n            },\r\n          ]}\r\n          layout={{\r\n            width: 700,\r\n            height: 700,\r\n            title: \"\",\r\n          }}\r\n        />\r\n        <p className=\"solvingError\">\r\n          The chosen combination of parameters leads to either an inconsistent system or a system with infinitely many solutions, so it can't be\r\n          solved for a unique spline. Sorry!\r\n        </p>\r\n      </div>\r\n    );\r\n  } else if (solvingError && isGraphable_Points && isGraphable_Function) {\r\n    return (\r\n      <div className=\"plot\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              mode: \"lines\",\r\n              name: \"Preset Function\",\r\n              line: {\r\n                color: functionColor,\r\n              },\r\n              x: xIncrements,\r\n              y: yFunction,\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: splineColor,\r\n              },\r\n            },\r\n            {\r\n              mode: \"markers\",\r\n              name: \"Data Points\",\r\n              marker: {\r\n                color: pointColor,\r\n                size: 10,\r\n              },\r\n              x: xPoints,\r\n              y: yPoints,\r\n            },\r\n          ]}\r\n          layout={{\r\n            width: 700,\r\n            height: 700,\r\n            title: \"\",\r\n          }}\r\n        />\r\n        <p className=\"solvingError\">\r\n          The chosen combination of parameters leads to either an inconsistent system or a system with infinitely many solutions, so it can't be\r\n          solved for a unique spline. Sorry!\r\n        </p>\r\n      </div>\r\n    );\r\n  } else if (isGraphable_Points && !isGraphable_Function && !isGraphable_Spline) {\r\n    return (\r\n      <div className=\"plot\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: functionColor,\r\n              },\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: splineColor,\r\n              },\r\n            },\r\n            {\r\n              mode: \"markers\",\r\n              name: \"Data Points\",\r\n              marker: {\r\n                color: pointColor,\r\n                size: 10,\r\n              },\r\n              x: xPoints,\r\n              y: yPoints,\r\n            },\r\n          ]}\r\n          layout={{\r\n            width: 700,\r\n            height: 700,\r\n            title: \"\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  } else if (isGraphable_Points && isGraphable_Function && !isGraphable_Spline) {\r\n    return (\r\n      <div className=\"plot\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              mode: \"lines\",\r\n              name: \"Preset Function\",\r\n              line: {\r\n                color: functionColor,\r\n              },\r\n              x: xIncrements,\r\n              y: yFunction,\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: splineColor,\r\n              },\r\n            },\r\n            {\r\n              mode: \"markers\",\r\n              name: \"Data Points\",\r\n              marker: {\r\n                color: pointColor,\r\n                size: 10,\r\n              },\r\n              x: xPoints,\r\n              y: yPoints,\r\n            },\r\n          ]}\r\n          layout={{\r\n            width: 700,\r\n            height: 700,\r\n            title: \"\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  } else if (isGraphable_Points && isGraphable_Function && isGraphable_Spline) {\r\n    return (\r\n      <div className=\"plot\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              mode: \"lines\",\r\n              name: \"Preset Function\",\r\n              line: {\r\n                color: functionColor,\r\n              },\r\n              x: xIncrements,\r\n              y: yFunction,\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              name: \"Spline\",\r\n              line: {\r\n                color: splineColor,\r\n              },\r\n              x: xIncrements,\r\n              y: ySpline,\r\n            },\r\n            {\r\n              mode: \"markers\",\r\n              name: \"Data Points\",\r\n              marker: {\r\n                color: pointColor,\r\n                size: 10,\r\n              },\r\n              x: xPoints,\r\n              y: yPoints,\r\n            },\r\n          ]}\r\n          layout={{\r\n            width: 700,\r\n            height: 700,\r\n            title: \"\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  } else if (isGraphable_Points && !isGraphable_Function && isGraphable_Spline) {\r\n    return (\r\n      <div className=\"plot\">\r\n        <Plot\r\n          data={[\r\n            {\r\n              mode: \"lines\",\r\n              line: {\r\n                color: functionColor,\r\n              },\r\n            },\r\n            {\r\n              mode: \"lines\",\r\n              name: \"Spline\",\r\n              line: {\r\n                color: \"#0f6ee7\",\r\n              },\r\n              x: xIncrements,\r\n              y: ySpline,\r\n            },\r\n            {\r\n              mode: \"markers\",\r\n              name: \"Data Points\",\r\n              marker: {\r\n                color: pointColor,\r\n                size: 10,\r\n              },\r\n              x: xPoints,\r\n              y: yPoints,\r\n            },\r\n          ]}\r\n          layout={{\r\n            width: 700,\r\n            height: 700,\r\n            title: \"\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"plot\">\r\n      <Plot\r\n        data={[\r\n          {\r\n            mode: \"lines\",\r\n            line: {\r\n              color: functionColor,\r\n            },\r\n          },\r\n          {\r\n            mode: \"lines\",\r\n            line: {\r\n              color: splineColor,\r\n            },\r\n          },\r\n          {\r\n            mode: \"markers\",\r\n            name: \"Data Points\",\r\n            marker: {\r\n              color: \"orange\",\r\n              size: 10,\r\n            },\r\n          },\r\n        ]}\r\n        layout={{\r\n          width: 700,\r\n          height: 700,\r\n          title: \"\",\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LinSpace(Xo, Xn, step) {\r\n  let space = [];\r\n  for (let i = Xo; i <= Xn; i = Math.round((i + step) * 1000) / 1000) {\r\n    space.push(i);\r\n  }\r\n  return space;\r\n}\r\n","import { useState, useEffect, useRef } from \"react\";\r\nimport useArray from \"../../../hooks/useArray\";\r\nimport { Point } from \"../../../kspline\";\r\nimport { InputBox } from \"./Controller\";\r\nimport \"./XYTable.css\";\r\n\r\nexport default function XYTable(props) {\r\n  const numPoints = props.numPoints;\r\n  const pointsArrayMethods = props.pointsArrayMethods;\r\n  const enablePreset = props.enablePreset;\r\n  const presetFunction = props.presetFunction;\r\n\r\n  let rows = [];\r\n  let alt = false;\r\n  for (let i = 0; i < numPoints; i++) {\r\n    rows.push(\r\n      <XYTableRow\r\n        id={i}\r\n        alt={alt}\r\n        numPoints={numPoints}\r\n        pointsArrayMethods={pointsArrayMethods}\r\n        enablePreset={enablePreset}\r\n        presetFunction={presetFunction}\r\n      />\r\n    );\r\n    alt = !alt;\r\n  }\r\n\r\n  return (\r\n    <div className=\"xyTable\">\r\n      <Header />\r\n      {rows}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"xyTableHeader\">\r\n      <div>\r\n        <p>X</p>\r\n      </div>\r\n      <div>\r\n        <p>Y</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction XYTableRow(props) {\r\n  const id = props.id;\r\n  const alt = props.alt;\r\n  const numPoints = props.numPoints;\r\n  const pointsArrayMethods = props.pointsArrayMethods;\r\n  const enablePreset = props.enablePreset;\r\n  const presetFunction = props.presetFunction;\r\n\r\n  const [x, setX] = useState(undefined);\r\n  const [y, setY] = useState(undefined);\r\n  const [dispX, setDispX] = useState(x);\r\n  const [dispY, setDispY] = useState(y);\r\n\r\n  const onInputX = (input) => {\r\n    setDispX(input);\r\n    if (input === \"\") {\r\n      setX(undefined);\r\n      return;\r\n    }\r\n\r\n    let numerical = Number(input);\r\n    if (Number.isNaN(numerical)) {\r\n      setX(undefined);\r\n      return;\r\n    }\r\n    setX(numerical);\r\n  };\r\n\r\n  const onInputY = (input) => {\r\n    setDispY(input);\r\n    if (input === \"\") {\r\n      setY(undefined);\r\n      return;\r\n    }\r\n\r\n    let numerical = Number(input);\r\n    if (Number.isNaN(numerical)) {\r\n      setY(undefined);\r\n      return;\r\n    }\r\n    setY(numerical);\r\n  };\r\n\r\n  const onInputX_enablePreset = (input) => {\r\n    setDispX(input);\r\n    if (input === \"\") {\r\n      setX(undefined);\r\n      setY(undefined);\r\n      return;\r\n    }\r\n\r\n    let numerical = Number(input);\r\n    if (Number.isNaN(numerical)) {\r\n      setX(undefined);\r\n      return;\r\n    }\r\n    setX(numerical);\r\n    setY(presetFunction(numerical));\r\n  };\r\n\r\n  const initialRender = useRef(true);\r\n  useEffect(() => {\r\n    if (!(x === undefined || y === undefined)) {\r\n      pointsArrayMethods.update(id, new Point(x, y));\r\n    } else {\r\n      pointsArrayMethods.update(id, undefined);\r\n    }\r\n  }, [x, y]);\r\n\r\n  useEffect(() => {\r\n    if (initialRender.current) {\r\n      initialRender.current = false;\r\n    } else {\r\n      setX(undefined);\r\n      setY(undefined);\r\n      setDispX(\"\");\r\n      setDispY(\"\");\r\n      pointsArrayMethods.set(new Array(10).fill(undefined));\r\n    }\r\n  }, [enablePreset, presetFunction]);\r\n\r\n  if (enablePreset) {\r\n    return (\r\n      <div className={alt ? \"tableRow-alt\" : \"tableRow\"}>\r\n        <input className=\"tableRowX\" onChange={(e) => onInputX_enablePreset(e.target.value)} value={dispX}></input>\r\n        <div>\r\n          <p>{y === undefined ? \"\" : Math.round(y * 100000) / 100000}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={alt ? \"tableRow-alt\" : \"tableRow\"}>\r\n      <input className=\"tableRowX\" onChange={(e) => onInputX(e.target.value)} value={dispX}></input>\r\n      <input className=\"tableRowY\" onChange={(e) => onInputY(e.target.value)} value={dispY}></input>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport \"./BoundaryConditionsTable.css\";\r\n\r\nexport default function BoundaryConditionsTable(props) {\r\n  const splineDegree = props.splineDegree;\r\n  const boundaryConditionType = props.boundaryConditionType;\r\n  const boundArrayMethods = props.boundArrayMethods;\r\n  const numCond = splineDegree - 1;\r\n\r\n  let leftRows = [];\r\n  let rightRows = [];\r\n  let id = 0;\r\n  if (boundaryConditionType === \"Natural\") {\r\n    for (let i = 0; i < Math.floor(numCond / 2); i++) {\r\n      leftRows.push(<NaturalTableRow order={numCond - i} isLeft={true} />);\r\n    }\r\n    for (let i = 0; i < Math.ceil(numCond / 2); i++) {\r\n      rightRows.push(<NaturalTableRow order={numCond - i} isLeft={false} />);\r\n    }\r\n  } else if (boundaryConditionType === \"Not-a-Knot + Natural\") {\r\n    if (splineDegree > 1) {\r\n      leftRows.push(<NotAKnotTableRow order={splineDegree} isLeft={true} />);\r\n    }\r\n    if (splineDegree > 2) {\r\n      rightRows.push(<NotAKnotTableRow order={splineDegree} isLeft={false} />);\r\n    }\r\n\r\n    for (let i = 0; i < Math.floor((numCond - 2) / 2); i++) {\r\n      leftRows.push(<NaturalTableRow order={numCond - i} isLeft={true} />);\r\n      id++;\r\n    }\r\n    for (let i = 0; i < Math.ceil((numCond - 2) / 2); i++) {\r\n      rightRows.push(<NaturalTableRow order={numCond - i} isLeft={false} />);\r\n      id++;\r\n    }\r\n  } else if (boundaryConditionType === \"Not-a-Knot + Clamped\") {\r\n    if (splineDegree > 1) {\r\n      leftRows.push(<NotAKnotTableRow order={splineDegree} isLeft={true} />);\r\n    }\r\n    if (splineDegree > 2) {\r\n      rightRows.push(<NotAKnotTableRow order={splineDegree} isLeft={false} />);\r\n    }\r\n    for (let i = 0; i < Math.ceil((numCond - 2) / 2); i++) {\r\n      leftRows.push(\r\n        <TableRowWithInput\r\n          id={id}\r\n          order={i + 1}\r\n          isLeft={true}\r\n          boundArrayMethods={boundArrayMethods}\r\n          splineDegree={splineDegree}\r\n          boundaryConditionType={boundaryConditionType}\r\n        />\r\n      );\r\n      id++;\r\n    }\r\n    for (let i = 0; i < Math.floor((numCond - 2) / 2); i++) {\r\n      rightRows.push(\r\n        <TableRowWithInput\r\n          id={id}\r\n          order={i + 1}\r\n          isLeft={false}\r\n          boundArrayMethods={boundArrayMethods}\r\n          splineDegree={splineDegree}\r\n          boundaryConditionType={boundaryConditionType}\r\n        />\r\n      );\r\n      id++;\r\n    }\r\n  } else if (boundaryConditionType === \"Clamped\") {\r\n    for (let i = 0; i < Math.ceil(numCond / 2); i++) {\r\n      leftRows.push(\r\n        <TableRowWithInput\r\n          id={id}\r\n          order={i + 1}\r\n          isLeft={true}\r\n          boundArrayMethods={boundArrayMethods}\r\n          splineDegree={splineDegree}\r\n          boundaryConditionType={boundaryConditionType}\r\n        />\r\n      );\r\n      id++;\r\n    }\r\n    for (let i = 0; i < Math.floor(numCond / 2); i++) {\r\n      rightRows.push(\r\n        <TableRowWithInput\r\n          id={id}\r\n          order={i + 1}\r\n          isLeft={false}\r\n          boundArrayMethods={boundArrayMethods}\r\n          splineDegree={splineDegree}\r\n          boundaryConditionType={boundaryConditionType}\r\n        />\r\n      );\r\n      id++;\r\n    }\r\n  }\r\n\r\n  let className = \"boundaryConditionsTable\";\r\n  if (boundaryConditionType === \"Natural\" || boundaryConditionType === \"Not-a-Knot + Natural\") {\r\n    className = \"boundaryConditionsTable-Natural\";\r\n  }\r\n\r\n  return (\r\n    <div className={className}>\r\n      <Header />\r\n      {numCond > 0 ? (\r\n        <div className=\"conditions\">\r\n          <div className=\"leftBoundaryConditions\">{leftRows}</div>\r\n          <div className=\"rightBoundaryConditions\">{rightRows}</div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"boundaryConditionsTableHeader\">\r\n      <p>Boundary Conditions</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NaturalTableRow(props) {\r\n  const order = props.order;\r\n  const isLeft = props.isLeft;\r\n  return (\r\n    <div className=\"boundaryTableRow\">\r\n      <p>\r\n        S<sup>({order})</sup>(x<sub>{isLeft ? 0 : \"N\"}</sub>) =\r\n      </p>\r\n      <p>0</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NotAKnotTableRow(props) {\r\n  const order = props.order;\r\n  const isLeft = props.isLeft;\r\n  return (\r\n    <div className=\"boundaryTableRow-Not-a-Knot\">\r\n      <p>\r\n        S<sub>{isLeft ? 0 : \"N-2\"}</sub>\r\n        <sup>({order})</sup>(x<sub>{isLeft ? 1 : \"N-1\"}</sub>) = S<sub>{isLeft ? 1 : \"N-1\"}</sub>\r\n        <sup>({order})</sup>(x<sub>{isLeft ? 1 : \"N-1\"}</sub>)\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TableRowWithInput(props) {\r\n  const id = props.id;\r\n  const order = props.order;\r\n  const isLeft = props.isLeft;\r\n  const boundArrayMethods = props.boundArrayMethods;\r\n  const splineDegree = props.splineDegree;\r\n  const boundaryConditionType = props.boundaryConditionType;\r\n  const [value, setValue] = useState(undefined);\r\n  const [dispValue, setDispValue] = useState(value);\r\n\r\n  const onInput = (input) => {\r\n    setDispValue(input);\r\n    if (input === \"\") {\r\n      setValue(undefined);\r\n      return;\r\n    }\r\n\r\n    let numerical = Number(input);\r\n    if (Number.isNaN(numerical)) {\r\n      setValue(undefined);\r\n      return;\r\n    }\r\n\r\n    setValue({\r\n      order: order,\r\n      value: numerical,\r\n    });\r\n  };\r\n\r\n  const initialRender = useRef(true);\r\n  useEffect(() => {\r\n    if (value === undefined) {\r\n      boundArrayMethods.update(id, undefined);\r\n    } else {\r\n      boundArrayMethods.update(id, value);\r\n    }\r\n  }, [value]);\r\n\r\n  useEffect(() => {\r\n    if (initialRender.current) {\r\n      initialRender.current = false;\r\n    } else {\r\n      setValue(undefined);\r\n      setDispValue(\"\");\r\n    }\r\n  }, [boundaryConditionType]);\r\n\r\n  return (\r\n    <div className=\"boundaryTableRow\">\r\n      <p>\r\n        S<sup>({order})</sup>(x<sub>{isLeft ? 0 : \"N\"}</sub>) =\r\n      </p>\r\n      <input className=\"boundaryConditionsInput\" value={dispValue} onChange={(e) => onInput(e.target.value)}></input>\r\n    </div>\r\n  );\r\n}\r\n","import useToggle from \"../../../hooks/useToggle\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport Slider, { Range } from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport \"./Controller.css\";\r\nimport XYTable from \"./XYTable\";\r\nimport BoundaryConditionsTable from \"./BoundaryConditionsTable\";\r\nconst math = require(\"mathjs\");\r\n\r\nexport default function Controller(props) {\r\n  // states\r\n  const numPoints = props.numPoints;\r\n  const points = props.points;\r\n  const enablePreset = props.enablePreset;\r\n  const presetFunction = props.presetFunction;\r\n  const splineDegree = props.splineDegree;\r\n  const boundaryConditionType = props.boundaryConditionType;\r\n  const boundArray = props.boundArray;\r\n  // state setters\r\n  const setNumPoints = props.setNumPoints;\r\n  const pointsArrayMethods = props.pointsArrayMethods;\r\n  const togglePreset = props.togglePreset;\r\n  const setPreset = props.setPreset;\r\n  const setSplineDegree = props.setSplineDegree;\r\n  const setBoundaryConditionType = props.setBoundaryConditionType;\r\n  const boundArrayMethods = props.boundArrayMethods;\r\n\r\n  return (\r\n    <div className=\"controller\">\r\n      <div className=\"controllerTop\">\r\n        <NumDataBox\r\n          numPoints={numPoints}\r\n          setNumPoints={setNumPoints}\r\n          pointsArrayMethods={pointsArrayMethods}\r\n          boundaryConditionType={boundaryConditionType}\r\n        />\r\n        <PresetFunctionBox enablePreset={enablePreset} togglePreset={togglePreset} presetFunction={presetFunction} setPreset={setPreset} />\r\n        <SplineDegreeBox\r\n          splineDegree={splineDegree}\r\n          setSplineDegree={setSplineDegree}\r\n          boundaryConditionType={boundaryConditionType}\r\n          boundArrayMethods={boundArrayMethods}\r\n        />\r\n        <SelectBoundCondBox setBoundaryConditionType={setBoundaryConditionType} splineDegree={splineDegree} boundArrayMethods={boundArrayMethods} />\r\n      </div>\r\n      <div className=\"controllerBottom\">\r\n        <XYTable numPoints={numPoints} pointsArrayMethods={pointsArrayMethods} enablePreset={enablePreset} presetFunction={presetFunction} />\r\n        <BoundaryConditionsTable splineDegree={splineDegree} boundaryConditionType={boundaryConditionType} boundArrayMethods={boundArrayMethods} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NumDataBox(props) {\r\n  const numPoints = props.numPoints;\r\n  const setNumPoints = props.setNumPoints;\r\n  const pointsArrayMethods = props.pointsArrayMethods;\r\n  const boundaryConditionType = props.boundaryConditionType;\r\n  const isNotAKnot = boundaryConditionType === \"Not-a-Knot + Natural\" || boundaryConditionType === \"Not-a-Knot + Clamped\";\r\n  const [value, setValue] = useState(numPoints);\r\n  const [isValid, setIsValid] = useState(true);\r\n\r\n  // sanitize the input\r\n  const onChange = (input) => {\r\n    let min = 2;\r\n    if (isNotAKnot) {\r\n      min = 4;\r\n    }\r\n    if (input === \"\") {\r\n      // setIsValid(false);\r\n      setValue(undefined);\r\n      return;\r\n    }\r\n    let numerical = Number(input);\r\n    if (!(typeof numerical === \"number\") || Number.isNaN(numerical)) {\r\n      // setIsValid(false);\r\n      setValue(undefined);\r\n      return;\r\n    } else if (numerical < min) {\r\n      // setIsValid(false);\r\n      setValue(numerical);\r\n      return;\r\n    } else if (numerical > 10) {\r\n      // setIsValid(false);\r\n      setValue(numerical);\r\n      return;\r\n    }\r\n    setNumPoints(numerical);\r\n    setValue(numerical);\r\n    // pointsArrayMethods.clear();\r\n    // setIsValid(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    for (let i = numPoints - 1; i < 10; i++) {\r\n      pointsArrayMethods.update(i, undefined);\r\n    }\r\n  }, [numPoints]);\r\n\r\n  useEffect(() => {\r\n    if (isNotAKnot) {\r\n      if (value < 4 || value === undefined) {\r\n        setIsValid(false);\r\n      } else {\r\n        setIsValid(true);\r\n      }\r\n    } else {\r\n      if (value < 2 || value === undefined) {\r\n        setIsValid(false);\r\n      } else {\r\n        setIsValid(true);\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"numDataBox\">\r\n      <p>Number of Data Points:</p>\r\n      <InputBox className=\"numDataInputBox\" displayValue={numPoints} callback={(input) => onChange(input)} />\r\n      {!isValid && !isNotAKnot ? (\r\n        <p className=\"invalidNumData\">\r\n          Please enter a <b>number</b> between <b>2 and 10</b>\r\n        </p>\r\n      ) : null}\r\n      {!isValid && isNotAKnot ? (\r\n        <p className=\"invalidNumData\">\r\n          Please enter at least <b>4 data points</b> when using a Not-a-Knot condition\r\n        </p>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction PresetFunctionBox(props) {\r\n  const enablePreset = props.enablePreset;\r\n  const togglePreset = props.togglePreset;\r\n  const presetFunction = props.presetFunction;\r\n  const setPreset = props.setPreset;\r\n\r\n  const presets = [\"Exponential\", \"Logarithm\", \"Sine\", \"Cosine\", \"Hyperbolic Tangent\", \"Factorial\", \"Gamma\"];\r\n\r\n  // string-to-function switcher\r\n  const onSelection = (funcSelection) => {\r\n    if (!presets.includes(funcSelection)) {\r\n      return;\r\n    }\r\n    if (funcSelection === \"Exponential\") {\r\n      setPreset(() => (x) => Math.exp(x));\r\n    } else if (funcSelection === \"Logarithm\") {\r\n      setPreset(() => (x) => Math.log(x));\r\n    } else if (funcSelection === \"Sine\") {\r\n      setPreset(() => (x) => Math.sin(x));\r\n    } else if (funcSelection === \"Cosine\") {\r\n      setPreset(() => (x) => Math.cos(x));\r\n    } else if (funcSelection === \"Hyperbolic Tangent\") {\r\n      setPreset(() => (x) => Math.tanh(x));\r\n    } else if (funcSelection === \"Factorial\") {\r\n      setPreset(() => (x) => math.factorial(x));\r\n    } else if (funcSelection === \"Gamma\") {\r\n      setPreset(() => (x) => math.gamma(x));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"presetFunctionBox\">\r\n      <TogglePresetButton enablePreset={enablePreset} togglePreset={togglePreset} />\r\n      <div className=\"presetFunctionBoxInnerBox\">\r\n        <p>Preset Function:</p>\r\n        <DropDownMenu menuItems={presets} callback={onSelection} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TogglePresetButton(props) {\r\n  const enablePreset = props.enablePreset;\r\n  const togglePreset = props.togglePreset;\r\n\r\n  return (\r\n    <div className=\"togglePresetButton\" onClick={togglePreset}>\r\n      <svg className=\"togglePresetSvg\" viewBox=\"0px 0px 14px 14px\">\r\n        {enablePreset ? (\r\n          <circle className=\"circle\" cx=\"7\" cy=\"7\" r=\"6px\" stroke=\"#001e55\" fill=\"#cee0ff\"></circle>\r\n        ) : (\r\n          <circle className=\"circle\" cx=\"7\" cy=\"7\" r=\"6px\" stroke=\"#001e55\" fill=\"#ffffff\"></circle>\r\n        )}\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SplineDegreeBox(props) {\r\n  const splineDegree = props.splineDegree;\r\n  const setSplineDegree = props.setSplineDegree;\r\n  const boundaryConditionType = props.boundaryConditionType;\r\n  const boundArrayMethods = props.boundArrayMethods;\r\n\r\n  const onChange = (newValue) => {\r\n    let k = Number(newValue);\r\n    setSplineDegree(k);\r\n    // if (boundaryConditionType === \"Not-a-Knot + Clamped\" || boundaryConditionType === \"Not-a-Knot + Natural\") {\r\n    //   let kOffset = k > 1 ? (k > 2 ? 2 : 1) : 0;\r\n    //   boundArrayMethods.set(new Array(k - 1 - kOffset).fill(undefined));\r\n    // } else {\r\n    //   boundArrayMethods.set(new Array(k - 1).fill(undefined));\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className=\"splineDegreeBox\">\r\n      <p>Spline Degree:</p>\r\n      <Slider className=\"degreeSlider\" min={1} max={10} onChange={(e) => onChange(e)} />\r\n      <p>{splineDegree}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SelectBoundCondBox(props) {\r\n  //   const boundaryConditionType = props.boundaryConditionType;\r\n  const setBoundaryConditionType = props.setBoundaryConditionType;\r\n  const splineDegree = props.splineDegree;\r\n  const boundArrayMethods = props.boundArrayMethods;\r\n\r\n  const onSelection = (condSelection) => {\r\n    setBoundaryConditionType(condSelection);\r\n    if (condSelection === \"Not-a-Knot + Clamped\" || condSelection === \"Not-a-Knot + Natural\") {\r\n      let kOffset = splineDegree > 1 ? (splineDegree > 2 ? 2 : 1) : 0;\r\n      boundArrayMethods.set(new Array(splineDegree - 1 - kOffset).fill(undefined));\r\n    } else {\r\n      boundArrayMethods.set(new Array(splineDegree - 1).fill(undefined));\r\n    }\r\n  };\r\n\r\n  const types = [\"Natural\", \"Clamped\", \"Not-a-Knot + Natural\", \"Not-a-Knot + Clamped\"];\r\n\r\n  return (\r\n    <div className=\"boundConditionTypeBox\">\r\n      <p>Boundary Conditions:</p>\r\n      <DropDownMenu menuItems={types} callback={onSelection} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction DropDownMenu(props) {\r\n  const menuItems = props.menuItems;\r\n  const callback = props.callback !== undefined ? props.callback : () => {};\r\n  const [selectedItem, setSelectedItem] = useState(menuItems[0]);\r\n  const [isOpen, toggleIsOpen] = useToggle(false);\r\n\r\n  const onClickOutside = (event) => {\r\n    if (!event.currentTarget.contains(event.relatedTarget)) {\r\n      toggleIsOpen(false);\r\n    }\r\n  };\r\n\r\n  const initialRender = useRef(false);\r\n  useEffect(() => {\r\n    if (initialRender.current) {\r\n      initialRender.current = false;\r\n    } else {\r\n      callback(selectedItem);\r\n      toggleIsOpen(false);\r\n    }\r\n  }, [selectedItem]);\r\n\r\n  return (\r\n    <div className=\"dropdown\" tabIndex={1} onBlur={(e) => onClickOutside(e)}>\r\n      <div className=\"selectedDropdownItem\" onClick={() => toggleIsOpen()}>\r\n        <p>{selectedItem}</p>\r\n      </div>\r\n      {isOpen ? (\r\n        <div className=\"unselectedDropdownItems\">\r\n          {menuItems.map((item) => {\r\n            if (item !== selectedItem) {\r\n              return (\r\n                <div className=\"dropdownItem\" onClick={() => setSelectedItem(item)}>\r\n                  <p>{item}</p>\r\n                </div>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })}\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function InputBox(props) {\r\n  const className = props.className;\r\n  const callback = props.callback !== undefined ? props.callback : () => {};\r\n  const [value, setValue] = useState(props.displayValue);\r\n\r\n  const onChange = (newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const initialRender = useRef(true);\r\n  useEffect(() => {\r\n    if (initialRender.current) {\r\n      initialRender.current = false;\r\n    } else {\r\n      callback(value);\r\n    }\r\n  }, [value]);\r\n\r\n  return (\r\n    <input\r\n      className={className}\r\n      onChange={(e) => {\r\n        onChange(e.target.value);\r\n      }}\r\n      value={value}\r\n    ></input>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport useArray from \"../../hooks/useArray\";\r\nimport useToggle from \"../../hooks/useToggle\";\r\nimport { Point } from \"../../kspline\";\r\nimport Graph from \"./Graph\";\r\nimport Controller from \"./Controller/Controller\";\r\nimport \"./GraphContainer.css\";\r\n\r\nexport default function GraphContainer(props) {\r\n  // all states that the graph will use must be communicated with the controller\r\n  const [numPoints, setNumPoints] = useState(2);\r\n  const [points, pointsArrayMethods] = useArray([]);\r\n  const [enablePreset, togglePreset] = useToggle(false);\r\n  const [presetFunction, setPreset] = useState(null);\r\n  const [splineDegree, setSplineDegree] = useState(1);\r\n  const [boundaryConditionType, setBoundaryConditionType] = useState(\"Natural\");\r\n  const [boundArray, boundArrayMethods] = useArray(Array(splineDegree - 1));\r\n\r\n  return (\r\n    <div className=\"graphContainer\">\r\n      <Graph\r\n        numPoints={numPoints}\r\n        points={points}\r\n        enablePreset={enablePreset}\r\n        presetFunction={presetFunction}\r\n        splineDegree={splineDegree}\r\n        boundaryConditionType={boundaryConditionType}\r\n        boundArray={boundArray}\r\n      />\r\n      <Controller\r\n        numPoints={numPoints}\r\n        points={points}\r\n        enablePreset={enablePreset}\r\n        presetFunction={presetFunction}\r\n        splineDegree={splineDegree}\r\n        boundaryConditionType={boundaryConditionType}\r\n        boundArray={boundArray}\r\n        setNumPoints={setNumPoints}\r\n        pointsArrayMethods={pointsArrayMethods}\r\n        togglePreset={togglePreset}\r\n        setPreset={setPreset}\r\n        setSplineDegree={setSplineDegree}\r\n        setBoundaryConditionType={setBoundaryConditionType}\r\n        boundArrayMethods={boundArrayMethods}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport InfoCards from \"./components/InfoCards/InfoCards\";\nimport GraphContainer from \"./components/GraphContainer/GraphContainer\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [showCards, setShowCards] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <Navbar setShowCards={setShowCards} />\n      <GraphContainer />\n      {showCards ? <InfoCards setShowCards={setShowCards} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}